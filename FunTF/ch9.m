1;

function [n nbins x]=fig9_1()
                            # The mean is the first
                            # statistical description of a time series
  
  n=10000;
  nbins=200; #bins are the windows
  x=linspace(0,5,n)+randn(1,n);
  y=randn(1,n);
  timeMeanX = mean(reshape(x,n/nbins,nbins));
  timeMeanY = mean(reshape(y,n/nbins,nbins));

  subplot(221),plot(x), ylabel("amplitude")
  subplot(222), plot(y), ylabel("amplitude")
  subplot(223), plot(1:n/nbins:n, timeMeanX), ylabel("mean")
  subplot(224), plot(1:n/nbins:n, timeMeanY), ylabel("mean")
  title("Fig 9.1| it is clear y is mean stationary")
endfunction

function fig9_2()
                   # to make the time series achieve mean-stationarity
  [n nbins x]=fig9_1();
  x=diff(x);
  x(end+1) = x(end);
  timeMeanX = mean(reshape(x,n/nbins,nbins));

  clf
  subplot(221), plot(x), ylabel("Amplitude")
  subplot(223), plot(1:n/nbins:n, timeMeanX),
  ylabel("Mean"), xlabel("Time (a.u.)"),
  title("Fig 9.2 Derivating away the non-stationary");
  
endfunction

function fig9_3()
  [n nbins x]=fig9_1();
  x=linspace(1,5,n).*randn(1,n);
  y=exp(-linspace(-1,1,n).^2).*randn(1,n);
  timevarX = var(reshape(x,n/nbins,nbins),[],1);
  timevarY = var(reshape(y,n/nbins,nbins),[],1);

  clf
  subplot(221), plot(x), legend("data x")
  subplot(222), plot(y), legend("data y")
  subplot(223), plot(1:n/nbins:n, timevarX), legend("var X")
  subplot(224), plot(1:n/nbins:n, timevarY), legend("var Y"),
  title("fig 9.3 | variance-non-stationary time series")
endfunction

function fig9_4()
  srate=1000;
  t=0:1/srate:5;
  n=length(t);

  freqTS = interp1(10*randn(5,1), linspace(1,5,n), 'spline');
  centfreq = mean(freqTS);
  k = (centfreq/srate)*2*pi/centfreq;
  y = sin(2*pi.*centfreq.*t + k*cumsum(freqTS-centfreq));
  phases1 = diff(unwrap(angle(hilbert(y))));

  y= sin(2*pi.*10.*t);
  phases2 = diff(unwrap(angle(hilbert(y))));

  clf
  subplot(211), plot(t(1:end-1), phases1), legend("phase non stationarity")
  subplot(212), plot(t(1:end-1), phases2), legend("phase stationarity"), ylabel("phase derivate")
  title('9.4| two time series that exhibit phase non-stationarity')
endfunction

function [v mvsig] = fig9_5()
  ## A multivariate series will be created based on
  ## known covariance matrices.
  ## brief non-stationarities will be created by
  ## concatenating three multivariate time series
  ## generated by three different covariance matrices.
  % N per section
  n = 100000;

         % covariance matrices (3x3 because there will be 3 variables)
  v{1} = [1 .5  0; .5  1  0;  0  0  1.1];
  v{2} = [1.1 .1  0; .1  1.1  0;  0  1.1 .1];
  v{3} = [.8  0 .9;  0 1  0; 0 0  1.1];
  covar = cell(size(v));
                                # create multivariate signal
  mvsig = zeros(length(v));
  for i=1:length(v)
                                # create ideal covariance matrix
    c = chol(v{i}*v{i}');
                # create random numbers with this covariance structure
    tempd = randn(n, size(v{i},1))*c;
                                # compute the actual covariance
    covar{i} = (tempd'*tempd)/n;
    
    mvsig = cat(1, mvsig, tempd);
  end
  nn = length(mvsig);

                                # plot the three time series
  figure(1), clf
  subplot(211)
  plot(mvsig)
  hold on
  plot([n n; n*2 n*2]', get(gca,'ylim'), 'k:')
  title("fig 9.5 In the covariance matrices the color of the box is the strength of the covar")
                    # plot the covariance matrices within each segment
  for i=1:3
    subplot(2,3,i+3)
    imagesc(covar{i})
    set(gca, 'clim', [-1.5 1.5])
    title(['Covariance of segment ' num2str(i)])
  end
endfunction

function fig9_6()
  ## I give up I cannot find the bug in this code..
  ## TODO: Try later
  [v mvsig] = fig9_5();
  nbins = 200;
  nn = length(mvsig);
  d3d = reshape(mvsig,nn/nbins,nbins,length(v));

  for bini = 1:nbins
                                # tm = temporary matrix
    tm = squeeze(d3d(:,bini,:));
    tCovar(bini,:,:) = (tm'*tm)/size(d3d,1);

    if bini>i
      y(bini) = sum((reshape(tCovar(bini,:,:)-tCovar(bini-1,:,:),1,[]).^2));
    end
  end

  plot(y)
endfunction

function fig9_7()
                                # Generate a time series comprising
                               # frequency stationary sine wave 10 Hz
                               # and a chirp from 12 to 30hz
                               # over nine seconds.
                               # In four separate simulations,
                               # add noise that is
                        # variance stationary, and mean-non-stationary
                        # variance-non-stationary and mean-stationary

                                # create a noiseless signal
  srate = 1000;
  t=0:1/srate:9;
  n=length(t);

  freqTS = linspace(12,30,n);
  centfreq = mean(freqTS)
  k = (centfreq/srate)*2*pi/centfreq;
  basesig = sin(2*pi*10*t) + ...
            sin(2*pi.*centfreq.*t + k*cumsum(freqTS-centfreq));

                                # wavelet parameters
  wtime = -2:1/srate:2;
  Lconv = n+length(wtime)-1;
  halfwavL = floor(length(wtime)/2);
  nfrex = 50;
  frex = linspace(5,40,nfrex);
  ncyc = linspace(8,30,nfrex);

                                # add stationary noise
  signal = basesig + randn(1,n)*2;
                                # FFT of signal
  sigX = fft(signal, Lconv);

                                # perform wavelet convolution
  tf = zeros(length(frex), length(t));
  for fi=1:nfrex
    w = 2*(ncyc(fi)/(2*pi*frex(fi)))^2;
    cmw = exp(1i*2*pi*frex(fi).*wtime) .* ...
          exp((-wtime.^2)/w);
    cmwX = fft(cmw,Lconv);
    cmwX = cmwX./max(cmwX);

    convres = ifft(sigX.*cmwX);
    convres = convres(halfwavL: end-halfwavL-1);
    tf(fi,:) = abs(convres).^2;
  end

  clf
  contourf(t,frex,tf,40,'linecolor','none')
endfunction
